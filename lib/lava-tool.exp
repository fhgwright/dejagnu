# Copyright (C) 2014 Free Software Foundation, Inc.
#
# This file is part of DejaGnu.
#
# DejaGnu is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# DejaGnu is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with DejaGnu; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.

# Connect to HOSTNAME using rsh or ssh(1).
#
load_lib "rsh.exp"

proc lava_open { hostname } {
    # lava-tool submit-job $hostname /tmp/job_116632.json
    # lava-tool job-output --overwrite http://rob-welcomehome@validation.linaro.org/RPC2/ 124075
    # lava-tool job-output --overwrite $hostname 124075

    set_board_info hostname tcwgXXXXX

    rsh_open $hostname
}

# Download SRCFILE to DESTFILE on DESTHOST.
#
proc lava_download {desthost srcfile destfile} {
    rsh_download $desthost $srcfile $destfile
}

proc lava_upload {desthost srcfile destfile} {
    rsh_upload $desthost $srcfile $destfile
}

# Execute CMD on BOARDNAME.
#
proc lava_exec { boardname program pargs inp outp } {
    rsh_exec $boardname $program $pargs $inp $outp
}

proc lava_json { hostname infile outfile } {
    global srcdir

    set DATE "20140502"
    if {![board_info $hostname exists image]} {
	set IMAGE "http://community.validation.linaro.org/images/kvm/debian-7-4-base.img.gz"
    } else {
	set IMAGE [board_info $hostname image]
    }
    if {![board_info $hostname exists testdef]} {
	set TESTDEF "hacking-session-debian.yaml"
    } else {
	set TESTDEF [board_info $hostname testdef]
    }
    if {![board_info $hostname exists repo]} {
	set REPO "http://git.linaro.org/lava-team/hacking-session.git"
    } else {
	set REPO [board_info $hostname repo]
    }
    if {![board_info $hostname exists gateway]} {
	set GATEWAY "10.0.0.1"
    } else {
	set GATEWAY [board_info $hostname gateway]
    }
    if {![board_info $hostname exists server]} {
	set SERVER "http://validation.linaro.org:80/RPC2/"
    } else {
	set SERVER [board_info $hostname server]
    }
    if {![board_info $hostname exists stream]} {
	set STREAM "/anonymous/akbennett/"
    } else {
	set STREAM [board_info $hostname stream]
    }
    if {![board_info $hostname exists device]} {
	set DEVICE "kvm"
    } else {
	set DEVICE [board_info $hostname device]
    }
    if {![board_info $hostname exists health]} {
	set HEALTH "false"
    } else {
	set HEALTH [board_info $hostname health]
    }
    if {![board_info $hostname exists job]} {
	set JOB "kvm-debian-7.4-with-hack-session"
    } else {
	set JOB [board_info $hostname job]
    }
    
    set infd [open $infile r]
    set outfd [open $outfile w]
    while { [gets $infd cur_line]>=0 } {
	if {![string match "*#*" $cur_line]} {
	    if {![string match "*@*@*" $cur_line]} {
		puts $outfd $cur_line
	    } else {
		set start [string first "@" $cur_line]
		set end [string last "@" $cur_line]
		set keyword [string range $cur_line $start $end]
		switch $keyword {
		    "@IMAGE@" {
			set new_line [string replace $cur_line $start $end $IMAGE]
		    }
		    "@DATE@" {
			set new_line [string replace $cur_line $start $end $DATE]
		    }
		    "@REPO@" {
			set new_line [string replace $cur_line $start $end $REPO]
		    }
		    "@GATEWAY@" {
			set new_line [string replace $cur_line $start $end $GATEWAY]
		    }
		    "@TESTDEF@" {
			set new_line [string replace $cur_line $start $end $TESTDEF]
		    }
		    "@SERVER@" {
			set new_line [string replace $cur_line $start $end $SERVER]
		    }
		    "@STREAM@" {
			set new_line [string replace $cur_line $start $end $STREAM]
		    }
		    "@DEVICE@" {
			set new_line [string replace $cur_line $start $end $DEVICE]
		    }
		    "@HEALTH@" {
			set new_line [string replace $cur_line $start $end $HEALTH]
		    }
		    "@JOB@" {
			set new_line [string replace $cur_line $start $end $JOB]
		    }
		    default {
			set new_line $cur_line
		    }
		}
		puts $outfd $new_line
	    }
	}
    }
    close $infd
    close $outfd
    unset infd
    unset outfd

}
